{"ast":null,"code":"import _slicedToArray from \"/home/jlramos/Documents/ReactTS/my-app-ts/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/jlramos/Documents/ReactTS/my-app-ts/src/App.tsx\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport './App.css';\nimport { Typography } from '@material-ui/core';\nexport default function App() {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        value = _useState2[0],\n        setValue = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        todos = _useState4[0],\n        setTodos = _useState4[1];\n\n  useEffect(() => {});\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    addTodo(value);\n    setValue('');\n  };\n\n  const addTodo = text => {\n    setTodos([...todos, {\n      text: text,\n      complete: false\n    }]);\n  };\n\n  const complete = index => {\n    todos[index].complete = !todos[index].complete;\n    setTodos([...todos]);\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Responsive sh3\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    required: true,\n    value: value,\n    onChange: e => setValue(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Add Todo\")), React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, todos.map((todo, index) => React.createElement(Fragment, {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, todo.text, \" \", ' ', todos[index].complete ? React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => complete(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"TODO\") : React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => complete(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Complete\"))))));\n}","map":{"version":3,"sources":["/home/jlramos/Documents/ReactTS/my-app-ts/src/App.tsx"],"names":["React","Fragment","useState","useEffect","Typography","App","value","setValue","todos","setTodos","handleSubmit","e","preventDefault","addTodo","text","complete","index","target","map","todo"],"mappings":";;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAO,WAAP;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAOA,eAAe,SAASC,GAAT,GAA2B;AAAA,oBAGdH,QAAQ,CAAC,EAAD,CAHM;AAAA;AAAA,QAGjCI,KAHiC;AAAA,QAG1BC,QAH0B;;AAAA,qBAIdL,QAAQ,CAAU,EAAV,CAJM;AAAA;AAAA,QAIjCM,KAJiC;AAAA,QAI1BC,QAJ0B;;AAMxCN,EAAAA,SAAS,CAAC,MAAM,CACf,CADQ,CAAT;;AAGA,QAAMO,YAAY,GAAIC,CAAD,IAAiB;AACpCA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACP,KAAD,CAAP;AACAC,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAJD;;AAMA,QAAMM,OAAO,GAAIC,IAAD,IAAiB;AAC/BL,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW;AAACM,MAAAA,IAAI,EAAEA,IAAP;AAAaC,MAAAA,QAAQ,EAAE;AAAvB,KAAX,CAAD,CAAR;AACD,GAFD;;AAIA,QAAMA,QAAQ,GAAIC,KAAD,IAAyB;AACxCR,IAAAA,KAAK,CAACQ,KAAD,CAAL,CAAaD,QAAb,GAAwB,CAACP,KAAK,CAACQ,KAAD,CAAL,CAAaD,QAAtC;AACAN,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;AACD,GAHD;;AAKA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAGE;AAAM,IAAA,QAAQ,EAAEE,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,MAA3B;AAA4B,IAAA,KAAK,EAAEJ,KAAnC;AAA0C,IAAA,QAAQ,EAAEK,CAAC,IAAIJ,QAAQ,CAACI,CAAC,CAACM,MAAF,CAASX,KAAV,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CAHF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAcH,KAAd,KACT,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,IAAI,CAACL,IADR,OACe,GADf,EAIMN,KAAK,CAACQ,KAAD,CAAL,CAAaD,QAAb,GAEA;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAE,MAAMA,QAAQ,CAACC,KAAD,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,GAMA;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAE,MAAMD,QAAQ,CAACC,KAAD,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVN,CADF,CADD,CADH,CATF,CADF;AA+BD","sourcesContent":["import React , { Fragment, useState, useEffect } from 'react';\nimport './App.css';\nimport { Typography } from '@material-ui/core';\n\ninterface ITodo {\n  text: string\n  complete: boolean\n}\n\nexport default function App(): JSX.Element{\n  type FormElem = React.FormEvent<HTMLFormElement>;\n\n  const [value, setValue] = useState('');\n  const [todos, setTodos] = useState<ITodo[]>([]);\n  \n  useEffect(() => {\n  });\n\n  const handleSubmit = (e: FormElem) => {\n    e.preventDefault();\n    addTodo(value);\n    setValue('');\n  }\n\n  const addTodo = (text:string) => {\n    setTodos([...todos, {text: text, complete: false}])\n  }\n\n  const complete = (index: number): void => {\n    todos[index].complete = !todos[index].complete\n    setTodos([...todos])\n  }\n\n  return (\n    <Fragment>\n      <Typography variant=\"h3\">Responsive sh3</Typography>\n\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" required value={value} onChange={e => setValue(e.target.value)}/>\n\n        <button type=\"submit\">Add Todo</button>\n      </form>\n\n      <section>\n        {todos.map((todo: ITodo, index: number) => (\n          <Fragment key={index}>\n            <div>\n              {todo.text} {' '}\n\n                {\n                  todos[index].complete ? \n                \n                  <button type='button' onClick={() => complete(index)}>TODO</button>\n  \n                  : \n  \n                  <button type='button' onClick={() => complete(index)}>Complete</button>\n                }\n            </div>     \n          </Fragment>\n        ))}\n      </section>\n    </Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}